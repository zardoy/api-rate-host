generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Host {
  id          Int          @default(autoincrement()) @id
  description String
  name        String
  ownerUserId String       @unique
  site        String
  createdAt   DateTime     @default(now())
  isSuspended Boolean      @default(false)
  members     HostMember[]
  userInvite  UserInvite[]
  userRatings UserRating[]
}

model HostMember {
  userId String @id
  hostId Int
  host   Host   @relation(fields: [hostId], references: [id])
}

model UserInvite {
  toUserId   String
  fromHostId Int
  host       Host   @relation(fields: [fromHostId], references: [id])

  @@id([toUserId, fromHostId])
}

model HosterResponse {
  ratingId    Int         @id
  commentId   Int
  userComment UserComment @relation(fields: [commentId], references: [commentId])
}

model UserComment {
  commentId       Int               @default(autoincrement()) @id
  ratingId        Int
  createdAt       DateTime          @default(now())
  updatedAt       DateTime?         @updatedAt
  text            String
  toCommentId     Int?
  userId          String
  karma           Int               @default(0)
  dedicatedReview UserReview        @relation(fields: [ratingId], references: [ratingId])
  hosterResponses HosterResponse[]
  votes           UserCommentVote[]
}

model UserCommentVote {
  commentId        Int
  userId           String
  voteType         VoteType
  dedicatedComment UserComment @relation(fields: [commentId], references: [commentId])

  @@id([commentId, userId])
}

model UserRating {
  ratingId      Int          @default(autoincrement()) @id
  hostId        Int
  userId        String
  general       Float
  billing       Float?
  cpu           Float?
  ram           Float?
  support       Float?
  dedicatedHost Host         @relation(fields: [hostId], references: [id])
  userReview    UserReview[]

  @@unique([hostId, userId], name: "UserRating_hostId_userId_key")
}

model UserReview {
  ratingId        Int              @id
  text            String
  karma           Int              @default(0)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime?        @updatedAt
  userRating      UserRating       @relation(fields: [ratingId], references: [ratingId])
  userComments    UserComment[]
  userReviewVotes UserReviewVote[]
}

model UserReviewVote {
  ratingId   Int
  userId     String
  voteType   VoteType
  userReview UserReview @relation(fields: [ratingId], references: [ratingId])

  @@id([ratingId, userId])
}

enum VoteType {
  DOWN
  UP
}
