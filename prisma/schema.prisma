generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Host {
  createdAt   DateTime     @default(dbgenerated())
  description String
  id          Int          @default(autoincrement()) @id
  isSuspended Boolean?     @default(false)
  name        String
  ownerUserId String       @unique
  site        String

  members  HostMember[]
  userRatings  UserRating[]
}

model HostMember {
  hostId Int
  userId String @id

  host   Host   @relation(fields: [hostId], references: [id])
}

model HosterResponse {
  commentId   Int
  ratingId    Int         @id

  userComment UserComment @relation(fields: [commentId], references: [commentId])
}

model UserComment {
  commentId       Int               @default(autoincrement()) @id
  createdAt       DateTime          @default(now())
  karma           Int               @default(0)
  ratingId        Int
  text            String
  toCommentId     Int?
  updatedAt       DateTime? @updatedAt
  userId          String

  dedicatedReview      UserReview        @relation(fields: [ratingId], references: [ratingId])
  hosterResponses  HosterResponse[]
  votes UserCommentVote[]
}

model UserCommentVote {
  commentId   Int
  userId      String
  voteType    VoteType

  dedicatedComment UserComment @relation(fields: [commentId], references: [commentId])

  @@id([commentId, userId])
}

model UserRating {
  billing    Float?
  cpu        Float?
  general    Float
  hostId     Int
  ram        Float?
  ratingId   Int          @default(autoincrement()) @id
  support    Float?
  userId     String

  dedicatedHost       Host         @relation(fields: [hostId], references: [id])
  userReview UserReview[]

  @@unique([hostId, userId])
}

model UserReview {
  ratingId       Int              @id
  createdAt      DateTime         @default(now())
  karma          Int              @default(0)
  text           String
  updatedAt      DateTime? @updatedAt

  userRating     UserRating       @relation(fields: [ratingId], references: [ratingId])
  userComments    UserComment[]
  userReviewVotes UserReviewVote[]
}

model UserReviewVote {
  ratingId   Int
  userId     String
  voteType   VoteType

  userReview UserReview @relation(fields: [ratingId], references: [ratingId])

  @@id([ratingId, userId])
}

enum VoteType {
  DOWN
  UP
}