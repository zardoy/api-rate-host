import { on } from "nexus";
import * as dotenv from "dotenv";
import * as path from "path";
import { PrismaClient, Host, UserInvite } from "@prisma/client";
import { VK, Keyboard, MessageContext, KeyboardBuilder } from "vk-io";
import { QuestionManager, IQuestionMessageContext } from "vk-io-question";
import _ from "lodash";
import Debug from "@prisma/debug";


class UserInputTooLarge extends TypeError {
    constructor(public expectedLength: number, public usersLength: number, where: string) {
        super();
        this.message = `–ö —Å–∞–∂–µ–ª–µ–Ω–∏—é —Ç—É—Ç –∂–µ—Å—Ç–∫–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª-–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è ${where}: ${expectedLength}. –°–æ–∫—Ä–∞—Ç–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–≥–æ –ª–∏—à—å –Ω–∞ ${usersLength - expectedLength} —Å–∏–º–≤.`;
    }
}

// nexus —Ä–µ–∫–æ–º–º–µ–Ω–¥—É–µ—Ç –∏–Ω–∏—Ü. –¥–æ–ø. –ª–æ–≥–∏–∫—É —Ç—É—Ç –¥–∞–±—ã –∏—Å–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞, –≤—Ä–æ–¥–µ –∫–∞–∫ –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –Ω–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è
on.start(async () => {
    const debug = Debug("vk-bot");
    dotenv.config({
        path: path.resolve(__dirname, "./.env")
    });
    if (!process.env.VK_SUPER_SECRET_TOKEN) throw new TypeError("some of env vars are not defined");
    const prisma = new PrismaClient();
    const vk = new VK({
        token: process.env.VK_SUPER_SECRET_TOKEN,
        //bad internet connection todo: remove it
        apiTimeout: 50_000
    });
    //todo question?
    const questionManager/* : QuestionManager & { questions: string } */ = new QuestionManager();

    //todo –∂–µ—Å—Ç–∫–æ–µ –æ–≥—Ä —Å–≤–æ–π—Å—Ç–≤
    type MyMessageContext = MessageContext & {
        question: (question: string, params?: Parameters<MessageContext["send"]>[1]) => ReturnType<IQuestionMessageContext["question"]>,
        usersDataFromDb: {
            host: Host | null,
            invitesCount: number;
        };
    };
    type QuestionsMap = Map<number, unknown>;

    vk.updates.on("message_new", async (ctx: MyMessageContext, next) => {
        //–ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ª—é–±–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        const { senderId } = ctx;

        // const userHasQuestion = questionManager["questions"].has(senderId);

        // –µ—Å–ª–∏ –Ω–µ –≤ –¥–æ–ø—Ä–æ—Å–Ω–∏–∫–µ, –∑–Ω–∞—á–∏—Ç –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
        ctx.usersDataFromDb = {
            host: await prisma.host.findOne({
                where: {
                    ownerUserId: senderId.toString()
                }
            }),
            invitesCount: await prisma.userInvite.count({
                where: {
                    toUserId: senderId.toString()
                }
            })
        };

        const oldSend = ctx.send.bind(ctx);
        ctx.send = async (text, params = {}) => {
            const keyboardToSend = params.keyboard || (() => {
                const defaultKeyboard = Keyboard.builder().oneTime(true);
                if (ctx.usersDataFromDb.host) {
                    defaultKeyboard
                        .textButton({
                            label: "/editinfo - —Ä–µ–¥. —Ö–æ—Å—Ç",
                            color: "primary"
                        })
                        .textButton({
                            label: "/invite - –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å",
                            color: "positive"
                        });
                    //—É–¥–∞–ª–∏—Ç—å —Ö–æ—Å—Ç –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–ø–∏—Å–∞–≤ –∫–æ–º–∞–Ω–¥—É –≤—Ä—É—á–Ω—É—é
                } else {
                    defaultKeyboard
                        .textButton({
                            label: "/newhost —Å–æ–∑–¥–∞—Ç—å —Ö–æ—Å—Ç"
                        });
                }
                if (ctx.usersDataFromDb.invitesCount !== 0) {
                    defaultKeyboard
                        .oneTime()
                        .row()
                        .textButton({
                            label: "/invites - –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è",
                            color: "positive"
                        });
                }
                return defaultKeyboard;
            })();
            //todo-low refactor
            return await oldSend(text, {
                ...(keyboardToSend ? { keyboard: keyboardToSend } : {}),
                ...(params || _.omit(params, "keyboard"))
            });
        };
        await next();
    });

    vk.updates.on("message_new", async (ctx, next) => {
        // —Ç—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–∏ –≤–∫–ª—é—á–∞—è –∫–æ–≥–¥–∞ –≤ –¥–æ–ø—Ä–æ—Å–Ω–∏–∫–µ

        const { senderId } = ctx;
        if (!ctx.text) {
            await ctx.send(`–Ø –Ω–µ –≤–∏–∂—É —Ç–µ–∫—Å—Ç–∞. –ü–æ–≤—Ç–æ—Ä–∏-–∫–∞.`, {
                keyboard: undefined
            });
            return;
        }

        // –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç ctx.text.startsWith("/stop") —Ç–∫ –æ–Ω —Ä–µ–≥–∏—Å—Ç—Ä–æ–∑–∞–≤–∏—Å–∏–º—ã–π
        if (/^\/stop/i.test(ctx.text)) {
            await ctx.send("‚öìÔ∏è –í—ã –≤ –º–µ–Ω—é.");
            (questionManager["questions"] as QuestionsMap).delete(senderId);
            return;
        }
        await next();
    });

    vk.updates.on("message_new", questionManager.middleware);
    vk.updates.on("message_new", async (ctx: MyMessageContext, next) => {
        // –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ .question, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Å–ª–µ –µ–≥–æ middleware (–ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –æ–Ω –µ–≥–æ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç)

        const oldQuestion = ctx.question.bind(ctx);
        ctx.question = async (text, params?) => {
            return await oldQuestion(text, {
                keyboard: Keyboard.builder()
                    .oneTime(true)
                    .textButton({
                        label: "/stop - –ø–æ–∫–∏–Ω—É—Ç—å –¥–æ–ø—Ä–æ—Å",
                        color: "negative"
                    }),
                ...(params || {})
            });
        };
        await next();
    });

    vk.updates.on("message_new", async (ctx: MyMessageContext) => {
        // –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –≤ –¥–æ–ø—Ä–æ—Å–Ω–∏–∫–µ
        // –ø–æ–∏—Å–∫ –∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–º–∞–Ω–¥—ã
        const { senderId } = ctx;

        //–≤—ã–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É –¥–ª—è –∫–Ω–æ–ø–∫–∏ –Ω–∞—á–∞—Ç—å
        if (ctx.messagePayload && ctx.messagePayload.command === "start") ctx.text = "/help";

        if (
            // –µ—Å–ª–∏ –Ω–µ –∂–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
            !(questionManager["questions"] as QuestionsMap).has(senderId) &&
            !ctx.text!.startsWith("/")
        ) {
            await ctx.send(`–Ø —Å–µ–π—á–∞—Å –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∫–æ–º–º–∞–Ω–¥—ã, –∞ –æ–Ω–∏ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å /`);
            return;
        }


        const commandParts = ctx.text!.split(" "),
            userCommandInLowerCase = commandParts[0].slice(1).toLowerCase();

        const dangerousDeleteHost = async () => {
            await prisma.host.delete({
                where: {
                    ownerUserId: senderId.toString()
                }
            });
            ctx.usersDataFromDb.host = null;
        };

        let isFromDeclineCommand = false;
        const commands: Record<string, () => Promise<void>> = {
            help: async () => {
                const { invitesCount } = ctx.usersDataFromDb;

                const allAvailable = commandParts[1] === "all";
                const hostAvailable = allAvailable || !!ctx.usersDataFromDb!.host;
                const hasAnyInvites = allAvailable || invitesCount !== 0;
                await ctx.send(`
                        ${allAvailable ? `–í—Å–µ` : `–î–æ—Å—Ç—É–ø–Ω—ã–µ`} –¥–µ–π—Å—Ç–≤–∏—è:
                        - /help - ${!allAvailable ? "—ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞" : "c–ø—Ä–∞–≤–∫–∞ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∫–æ–º–º–∞–Ω–¥–∞–º–∏"}
                        - /help all - ${allAvailable ? "—ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞" : "c–ø—Ä–∞–≤–∫–∞ —Å–æ –≤—Å–µ–º–∏ –∫–æ–º–º–∞–Ω–¥–∞–º–∏"}
                        ${allAvailable ? `
                            - /stop - –≤—ã—Ö–æ–¥ –∏–∑ –¥–æ–ø—Ä–æ—Å–Ω–∏–∫–∞ –∏ —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç. –±–æ—Ç–∞
                        ` : ""}

                        ${allAvailable || !hostAvailable ? `
                            - /newhost - —Å–æ–∑–¥–∞—Ç—å —Ö–æ—Å—Ç
                        ` : ""}
                        ${allAvailable || hostAvailable ? `
                            - /removehost - —É–¥–∞–ª–∏—Ç—å —Ö–æ—Å—Ç
                            - /edithost - —Ä–µ–¥. –¥–∞–Ω–Ω—ã–µ —Ö–æ—Å—Ç–∞
                            - /invite [—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ —é–∑–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª] - –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã
                        ` : ""}

                        ${allAvailable || hasAnyInvites ? `
                        - /invites - –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è (${invitesCount})
                        - /accept <host id>
                        - /decline <host id>
                        ` : ""}
                    `.replace(/^\s+/gm, "") /* <-- —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏ (—Ñ–ª–∞–≥ m) */
                );
            },
            newhost: async () => {
                if (ctx.usersDataFromDb!.host) {
                    await ctx.send(`‚ùå –í—ã —É–∂–µ –≤–ª–∞–¥–µ—Ç–µ –æ–¥–Ω–∏–º —Ö–æ—Å—Ç–æ–º, –±–æ–ª—å—à–µ –Ω–µ–ª—å–∑—è. –°–º. /help –¥–ª—è —É–ø—Ä. —Ö–æ—Å—Ç–æ–º`);
                    return;
                }

                const PEN_SMILE = `‚úèÔ∏è`;
                const LINK_SMILE = `üîó`;

                const components = {
                    name: {
                        maxLength: 25,
                        question: `${PEN_SMILE} –ö–∞–∫ –Ω–∞–∑–æ–≤–µ–º —Ö–æ—Å—Ç? - –≤–≤–µ–¥–∏—Ç–µ /stop –¥–ª—è –≤—ã—Ö–æ–¥–∞`
                    },
                    site: {
                        maxLength: 50,
                        question: `${LINK_SMILE} –î–∞–π —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç —ç—Ç–æ–≥–æ —Ö–æ—Å—Ç–∞`
                    },
                    description: (() => {
                        const maxLength = 350;
                        return {
                            maxLength,
                            question: `${PEN_SMILE} –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–æ–ª—å–∫–æ –ø–æ–ø–æ–¥—Ä–æ–±–Ω–µ–π ;) - –º–∞–∫—Å ${maxLength} —Å–∏–º–≤–æ–ª–æ–≤`
                        };
                    })()
                };
                type ComponentName = keyof typeof components;

                const newHostData = new Map<ComponentName, string>();

                for (let [componentName, questionData] of Object.entries(components)) {
                    const { text: answer } = await ctx.question(questionData.question);
                    if (!answer) throw new TypeError("Empty response from user");
                    const { maxLength: expectedLength } = questionData,
                        usersLength = answer.length;
                    if (usersLength > expectedLength) throw new UserInputTooLarge(expectedLength, usersLength, componentName);
                    newHostData.set(componentName as ComponentName, answer);
                }

                try {
                    ctx.usersDataFromDb.host = await prisma.host.create({
                        data: {
                            ownerUserId: senderId.toString(),
                            //why fromEntries
                            ...Object.fromEntries(newHostData) as any
                        }
                    });
                    await ctx.send(`‚úÖ –ú—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ —Ö–æ—Å—Ç!`);
                } catch (err) {
                    console.error(err);
                    await ctx.send(`‚ùå –ù–∞—à –ø–æ–ª–Ω—ã–π –ø—Ä–æ–≤–∞–ª. –ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –∑–∞–Ω–µ—Å—Ç–∏ —Ö–æ—Å—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –°–æ–æ–±—â–∏—Ç–µ –Ω–∞–º –æ–± —ç—Ç–æ–º.`);
                }
            },
            deletehost: async () => {
                const usersHost = await prisma.host.findOne({
                    where: {
                        ownerUserId: senderId.toString()
                    },
                    include: {
                        members: true,
                        userRatings: true
                    }
                });
                if (!usersHost) {
                    await ctx.send(`‚ùå –í—ã –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏ —Ö–æ—Å—Ç. –£–¥–∞–ª—è—Ç—å –Ω–µ—á–µ–≥–æ.`);
                    return;
                }
                //–µ—Å–ª–∏ —É —Ö–æ—Å—Ç–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –Ω–µ—Ç—É —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –∏ —Å –º–æ–º–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—à–ª–æ –Ω–µ –±–æ–ª–µ–µ —Å—É—Ç–æ–∫ —Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –¥–æ–ø. —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–µ –Ω—É–∂–Ω–æ
                if (Date.now() - +usersHost.createdAt / 1000 / 60 / 60 / 24 < 1 && usersHost.members.length === 0 && usersHost.userRatings.length === 0) {
                    await dangerousDeleteHost();
                    await ctx.send(`‚úÖ –•–æ—Å—Ç —É–¥–∞–ª–µ–Ω. –ë—É–¥–µ–º —Ä–∞–¥—ã —É—Å–ª—ã—à–∞—Ç—å –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ –æ –ø—Ä–æ–µ–∫—Ç–µ: ${"github.com/zardoy/api-rate-host"}`);
                    return;
                }
                const removeConfirm = usersHost.name.slice(0, 15);
                const { text: answerConfirm } = await ctx.question(`–ù–∞–∑–∞–¥ –ø—É—Ç–∏ –Ω–µ—Ç! –í–≤–µ–¥–∏—Ç–µ "${removeConfirm}" (–±–µ–∑ –∫–∞–≤—ã—á–µ–∫) –¥–ª—è –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Ö–æ—Å—Ç–∞.`);
                if (answerConfirm === removeConfirm) {
                    await dangerousDeleteHost();
                    await ctx.send(`‚úÖ –•–æ—Å—Ç —É–¥–∞–ª–µ–Ω! –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –±—ã–ª–∏ —Å –Ω–∞–º–∏!`);
                } else {
                    await ctx.send(`–°–æ—Ä–∏, –Ω–æ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ –≤ —Ç–æ—á–Ω–æ—Å—Ç–∏ —Ç–∞–∫, –∫–∞–∫ –º—ã –≤–∞—Å –ø—Ä–æ—Å–∏–ª–∏. ${userCommandInLowerCase} –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞`);
                }
            },
            invite: async () => {
                const usersToInvite = commandParts.slice(1);
                if (usersToInvite.length > 5) {
                    await ctx.send(`‚ùå –ù–µ–ª—å–∑—è –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –±–æ–ª–µ–µ 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
                    return;
                }
                await ctx.send("Not implemented yet");
            },
            invites: async () => {
                const userInvitesFromHost = await prisma.userInvite.findMany({
                    where: {
                        toUserId: undefined
                    },
                    include: {
                        Host: true
                    }
                });
                if (userInvitesFromHost.length === 0) {
                    await ctx.send(`–¢—É! –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π!`);
                    return;
                }
                const invitesToPrint = userInvitesFromHost.map(inviteWithHost => `${inviteWithHost.fromHostId} ${inviteWithHost.Host.name}`);
                await vk.api.messages.send({
                    message: "",
                    template: "",
                });
                await ctx.send(`
                    –í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: ${userInvitesFromHost.length}
                    (–Ω–∞ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ—á–∫–µ ‚Äì id –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∏ –Ω–∞–∑–≤. —Ö–æ—Å—Ç–∞, –∏—Å–ø. id –≤ /accept –∏ /decline, –∫ –ø—Ä–∏–º–µ—Ä—É /accept 53248)
                    ${invitesToPrint.join("\n")}
                `.replace(/^\s+/gm, ""));
            },
            accept: async () => {
                const hostId = commandParts[1];
                if (!hostId) {
                    await ctx.send(`‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ /invites . –ö –ø—Ä–∏–º–µ—Ä—É: /${userCommandInLowerCase} 4359`);
                    return;
                }
                if (isNaN(+hostId)) {
                    await ctx.send(`‚ùå –í—ã –≤–≤–µ–ª–∏ –Ω–µ id, –∞ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ (–∞ –Ω—É–∂–Ω–æ —á–∏—Å–ª–æ!)`);
                    return;
                }
                const dedicatedInvite = await prisma.userInvite.findOne({
                    where: {
                        toUserId_fromHostId: {
                            toUserId: senderId.toString(),
                            fromHostId: +hostId
                        }
                    }
                });
                if (!dedicatedInvite) {
                    await ctx.send(`‚ùå –ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –æ—Ç—ã—Å–∫–∞—Ç—å —ç—Ç–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ :(`);
                    return;
                }
                await prisma.userInvite.delete({
                    where: {
                        toUserId_fromHostId: {
                            fromHostId: +hostId,
                            toUserId: senderId.toString()
                        }
                    }
                });
                if (!isFromDeclineCommand) {
                    //todo transaction
                    await prisma.hostMember.create({
                        data: {
                            host: { connect: { id: +hostId } },
                            userId: senderId.toString()
                        }
                    });
                }
                ctx.usersDataFromDb.invitesCount = await prisma.userInvite.count({
                    where: {
                        toUserId: senderId.toString()
                    }
                });
            },
            decline: async () => {
                isFromDeclineCommand = true;
                await commands.accept();
            }
        };
        const commandNameToExecute =
            Object.keys(commands).find((commandName) => commandName.toLowerCase() === userCommandInLowerCase);

        if (!commandNameToExecute) {
            await ctx.send(`/help —Ç–µ–±–µ –≤ –ø–æ–º–æ—â—å`);
            return;
        }

        try {
            await commands[commandNameToExecute]();
        } catch (err) {
            await ctx.send(`‚ùå –ù–µ –≤—ã—à–ª–æ –∏—Å–ø–æ–ª–Ω–∏—Ç—å /${commandNameToExecute} :(`);
            console.error(err);
        }
    });

    await vk.updates.start();
});