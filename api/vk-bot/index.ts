import { on } from "nexus";
import * as dotenv from "dotenv";
import * as path from "path";
import { PrismaClient } from "@prisma/client";
import { VK } from "vk-io";
import { SessionManager } from "@vk-io/session";

/*
—Ä–µ–≥–∏—Å—Ç—Ä –Ω–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ
*/

class UserInputTooLarge extends TypeError {
    constructor(public expectedLength: number, public usersLength: number, where: string) {
        super();
        this.message = `–ö —Å–∞–∂–µ–ª–µ–Ω–∏—é —Ç—É—Ç –∂–µ—Å—Ç–∫–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª-–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è ${where}: ${expectedLength}. –°–æ–∫—Ä–∞—Ç–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–≥–æ –ª–∏—à—å –Ω–∞ ${usersLength - expectedLength} —Å–∏–º–≤.`;
    }
}

on.start(async () => {
    dotenv.config({
        path: path.resolve(__dirname, "./.env")
    });
    if (!process.env.VK_SUPER_SECRET_TOKEN) throw new TypeError("some of env vars are not defined");
    const prisma = new PrismaClient();
    const vk = new VK({
        token: process.env.VK_SUPER_SECRET_TOKEN
    });
    const sessionManager = new SessionManager();
    //todo mb vk-io-question

    vk.updates.on("message_new", sessionManager.middleware);

    vk.updates.on("message_new", async (ctx) => {
        if (!ctx.text) {
            console.error("ctx empty text");
            await ctx.send(`–Ø –Ω–µ –≤–∏–∂—É —Ç–µ–∫—Å—Ç–∞. –ü–æ–≤—Ç–æ—Ä–∏-–∫–∞.`);
            return;
        }

        const dataFromDb = {
            async getUsersHost() {
                return await prisma.host.findOne({
                    where: {
                        ownerUserId: userId.toString()
                    }
                });
            },
            async getUserInvites() {
                return await prisma.userInvite.findMany({
                    where: {
                        toUserId: userId.toString()
                    }
                });
            }
        };

        const dangerousDeleteHost = async () => {
            prisma.host.delete({
                where: {
                    ownerUserId: userId.toString()
                }
            });
        };

        const userId = ctx["payload"].message.from_id;

        //todo rewrite ts type
        type DialogContext = {
            active: boolean,
            command: string,
            /** 0 initial for each. needs reset at the end */
            commandStep: number,
            inputData: {
                [componentData: string]: string;
            };
        };
        const dialogContext: DialogContext = ctx.session;
        const commandArgs = dialogContext.active ? null : ctx.text.split(" ").slice(1);
        const resetBotState = async () => {
            ctx.session = {
                active: false
            };
        };

        if (/^\/stop/i.test(ctx.text)) {
            await resetBotState();
            await ctx.send("‚öìÔ∏è–í—ã –≤ –º–µ–Ω—é.");
            return;
        }

        const userCommand: string = dialogContext.active ? dialogContext.command : ctx.text.split(" ")[0].slice(1).toLowerCase();

        const commands: Record<string, {
            /** keep undefined if commands doesn't need dialog context */
            dialogContextFinalStage?: number,
            handle: (anotherCommandName?: string) => Promise<void>;
        }> = {
            help: {
                handle: async () => {
                    const userInvites = await dataFromDb.getUserInvites();

                    const allAvailable = commandArgs && commandArgs[0] === "all";
                    const hostAvailable = allAvailable || !!(await dataFromDb.getUsersHost());
                    const hasAnyInvites = allAvailable || userInvites.length !== 0;
                    await ctx.send(`
                        –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
                        - /help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
                        - /help all - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞, –Ω–æ —Å–æ –≤—Å–µ–º–∏ –∫–æ–º–º–∞–Ω–¥–∞–º–∏
                        - /stop - –≤—ã—Ö–æ–¥ –∏–∑ –¥–æ–ø—Ä–æ—Å–Ω–∏–∫–∞ –∏ —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç. –±–æ—Ç–∞

                        ${allAvailable || !hostAvailable ? `
                         - /newhost - —Å–æ–∑–¥–∞—Ç—å —Ö–æ—Å—Ç
                        ` : ""}
                        ${allAvailable || hostAvailable ? `
                            - /removehost - —É–¥–∞–ª–∏—Ç—å —Ö–æ—Å—Ç
                            - /edithost - —Ä–µ–¥. –¥–∞–Ω–Ω—ã–µ —Ö–æ—Å—Ç–∞
                        ` : ""}

                        ${allAvailable || hasAnyInvites ? `
                            - /invites - –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è (${userInvites.length})
                            - /accept <host id>
                            - /decline <host id>
                        ` : ""}
                    `);
                }
            },
            newHost: {
                dialogContextFinalStage: 3,
                handle: async () => {
                    const maxLength = {
                        name: 25,
                        link: 50,
                        description: 350
                    };
                    const isTextTooLong = async (component: keyof typeof maxLength): Promise<void> => {
                        const usersLength = ctx.text!.length,
                            expectedLength = maxLength[component];
                        if (usersLength > maxLength[component]) throw new UserInputTooLarge(expectedLength, usersLength, component);
                    };
                    if (await (dataFromDb.getUsersHost())) {
                        await ctx.send(`‚ùå –í—ã —É–∂–µ –≤–ª–∞–¥–µ—Ç–µ –æ–¥–Ω–∏–º —Ö–æ—Å—Ç–æ–º, –±–æ–ª—å—à–µ –Ω–µ–ª—å–∑—è. –°–º. /help –¥–ª—è —É–ø—Ä. —Ö–æ—Å—Ç–æ–º`);
                        await resetBotState();
                        return;
                    }
                    switch (dialogContext.commandStep) {
                        case 0:
                            await ctx.send(`‚úèÔ∏è –ö–∞–∫ –Ω–∞–∑–æ–≤–µ–º —Ö–æ—Å—Ç? - –≤–≤–µ–¥–∏—Ç–µ /stop –¥–ª—è –≤—ã—Ö–æ–¥–∞`);
                            break;
                        case 1:
                            if (isTextTooLong("name")) return;
                            dialogContext.inputData = {
                                name: ctx.text!
                            };
                            await ctx.send(`üîó –î–∞–π —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç —ç—Ç–æ–≥–æ —Ö–æ—Å—Ç–∞`);
                            break;
                        case 2:
                            if (isTextTooLong("link")) return;
                            dialogContext.inputData.site = ctx.text!;
                            await ctx.send(`‚úèÔ∏è –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–æ–ª—å–∫–æ –ø–æ–ø–æ–¥—Ä–æ–±–Ω–µ–π ;) - –º–∞–∫—Å ${maxLength} —Å–∏–º–≤–æ–ª–æ–≤`);
                            break;
                        case 3:
                            if (isTextTooLong("description")) return;
                            dialogContext.inputData.description = ctx.text!;
                            try {
                                const { name, site, description } = dialogContext.inputData;
                                await prisma.host.create({
                                    data: {
                                        ownerUserId: userId.toString(),
                                        name,
                                        site,
                                        description
                                    }
                                });
                                await ctx.send(`–• –ú—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ —Ö–æ—Å—Ç!`);
                            } catch (err) {
                                console.error(err);
                                await ctx.send(`‚ùå –ù–∞—à –ø–æ–ª–Ω—ã–π –ø—Ä–æ–≤–∞–ª. –ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Å—Ç. –°–æ–æ–±—â–∏—Ç–µ –Ω–∞–º –æ–± —ç—Ç–æ–º.`);
                            }
                            break;
                    }
                }
            },
            deleteHost: {
                dialogContextFinalStage: 1,
                handle: async () => {
                    switch (dialogContext.commandStep) {
                        case 0:
                            const usersHost = await prisma.host.findOne({
                                where: {
                                    ownerUserId: userId.toString()
                                },
                                include: {
                                    members: true,
                                    userRatings: true
                                }
                            });
                            if (!usersHost) {
                                await ctx.send(`‚ùå –í—ã –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏ —Ö–æ—Å—Ç. –£–¥–∞–ª—è—Ç—å –Ω–µ—á–µ–≥–æ.`);
                                return;
                            }
                            //–µ—Å–ª–∏ —É —Ö–æ—Å—Ç–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –Ω–µ—Ç—É —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –∏ —Å –º–æ–º–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—à–ª–æ –Ω–µ –±–æ–ª–µ–µ —Å—É—Ç–æ–∫ —Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –¥–æ–ø. —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–µ –Ω—É–∂–Ω–æ
                            if (Date.now() - +usersHost.createdAt / 1000 / 60 / 60 / 24 < 1 && usersHost.members.length === 0 && usersHost.userRatings.length === 0) {
                                await dangerousDeleteHost();
                                await ctx.send(`–• –•–æ—Å—Ç —É–¥–∞–ª–µ–Ω. –ë—É–¥–µ–º —Ä–∞–¥—ã —É—Å–ª—ã—à–∞—Ç—å –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ –æ –ø—Ä–æ–µ–∫—Ç–µ: ${"github.com/zardoy/api-rate-host"}`);
                                return;
                            }
                            const removeConfirm = usersHost.name.slice(0, 15);
                            ctx.session.removeConfirm = removeConfirm;

                            await ctx.send(`–ù–∞–∑–∞–¥ –ø—É—Ç–∏ –Ω–µ—Ç! –í–≤–µ–¥–∏—Ç–µ ${removeConfirm} –¥–ª—è –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Ö–æ—Å—Ç–∞.`);
                            break;
                        case 1:
                            if (ctx.text! === ctx.session.removeConfirm) {
                                await dangerousDeleteHost();
                                await ctx.send(`–• –•–æ—Å—Ç —É–¥–∞–ª–µ–Ω! –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –±—ã–ª–∏ —Å –Ω–∞–º–∏!`);
                            }
                            break;
                    }
                }
            },
            invites: {
                handle: async () => {
                    const userInvitesFromHost = await prisma.userInvite.findMany({
                        where: {
                            toUserId: userId.toString()
                        },
                        include: {
                            Host: true
                        }
                    });
                    if (userInvitesFromHost.length === 0) {
                        await ctx.send(`–¢—É! –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π!`);
                        return;
                    }
                    const invitesToPrint = userInvitesFromHost.map(inviteWithHost => `${inviteWithHost.fromHostId} ${inviteWithHost.Host.name}`);
                    await ctx.send(`
                        –í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: ${userInvitesFromHost.length}
                        (–Ω–∞ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ—á–∫–µ ‚Äì id –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∏ –Ω–∞–∑–≤. —Ö–æ—Å—Ç–∞, –∏—Å–ø. id –≤ /accept –∏ /decline, –∫ –ø—Ä–∏–º–µ—Ä—É /accept 53248)
                        ${invitesToPrint.join("\n")}
                    `);
                }
            },
            accept: {
                handle: async (anotherCommandName) => {
                    const isFromDecline = anotherCommandName === "decline";

                    const hostId = commandArgs![0];
                    if (!hostId) {
                        await ctx.send(`–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ /invites . –ö –ø—Ä–∏–º–µ—Ä—É: /${userCommand} 4359`);
                        return;
                    }
                    if (isNaN(+hostId)) {
                        await ctx.send(`‚ùå –í—ã –≤–≤–µ–ª–∏ –Ω–µ id, –∞ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ (—ç—Ç–æ –Ω–µ —á–∏—Å–ª–æ)`);
                        return;
                    }
                    const dedicatedInvite = await prisma.userInvite.findOne({
                        where: {
                            toUserId_fromHostId: {
                                toUserId: userId.toString(),
                                fromHostId: +hostId
                            }
                        }
                    });
                    if (!dedicatedInvite) {
                        await ctx.send(`‚ùå –ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ —ç—Ç–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ`);
                        return;
                    }
                    await prisma.userInvite.delete({
                        where: {
                            toUserId_fromHostId: {
                                fromHostId: +hostId,
                                toUserId: userId.toString()
                            }
                        }
                    });
                    if (!isFromDecline) {
                        //todo transaction
                        await prisma.hostMember.create({
                            data: {
                                host: { connect: { id: +hostId } },
                                userId: userId.toString()
                            }
                        });
                    }
                }
            },
            decline: {
                handle: async () => {
                    await commands.accept.handle("decline");
                }
            },
            invite: {
                handle: async () => {
                    //todo check user id
                    //todo multiple users
                }
            }
        };
        const commandNameToExecute = Object.keys(commands).map(key => key.toLowerCase()).find(commandName => commandName === userCommand);
        if (commandNameToExecute) {
            const commandToExecute = commands[commandNameToExecute];
            if (commandToExecute.dialogContextFinalStage !== undefined) {
                if (dialogContext.active) {
                    if (dialogContext.commandStep === commandToExecute.dialogContextFinalStage) {
                        await resetBotState();
                    } else {
                        dialogContext.commandStep++;
                    }
                } else {
                    dialogContext.active = true;
                    dialogContext.command = commandNameToExecute;
                    dialogContext.commandStep = 0;
                }
            }
            try {
                await commandToExecute.handle();
            } catch (err) {
                if (err instanceof UserInputTooLarge) {
                    await ctx.send(err.message);
                } else {
                    await ctx.send(`‚ùå–ù–∞—à –ø–æ–ª–Ω—ã–π –ø—Ä–æ–≤–∞–ª. –ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç—å /${commandNameToExecute} :(`);
                    console.error(err);
                }
            }
        } else {
            await ctx.send(`/help —Ç–µ–±–µ –≤ –ø–æ–º–æ—â—å`);
        }
    });

    await vk.updates.start();
});